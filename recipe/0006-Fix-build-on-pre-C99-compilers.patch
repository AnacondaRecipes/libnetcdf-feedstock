From 12cc0e31e674306a8c448f30ddd8a8e201951f93 Mon Sep 17 00:00:00 2001
From: Nehal J Wani <nehaljw.kkd1@gmail.com>
Date: Wed, 22 Nov 2017 15:10:01 -0600
Subject: [PATCH 6/8] Fix build on pre-C99 compilers

 - Make sure that the variables are declared at the top of the block.
 - Add fix to enable inline for various compilers
---
 libdap4/d4includes.h   |  1 +
 libdap4/d4parser.c     | 13 ++++++++-----
 libdap4/d4rc.c         |  6 +++---
 libdap4/d4util.c       |  5 +++--
 libdispatch/dwinpath.c |  3 ++-
 libdispatch/utf8proc.c |  3 ++-
 libsrc/nc3internal.c   |  3 ++-
 libsrc/ncx.c           |  6 +++---
 libsrc/ncx.h           | 11 +++++++++++
 libsrc/ncx.m4          |  6 +++---
 nc_test/test_put.c     |  3 ++-
 nc_test/test_put.m4    |  3 ++-
 nc_test/test_write.c   |  2 +-
 nc_test/test_write.m4  |  2 +-
 oc2/ocnode.c           |  7 ++++---
 15 files changed, 48 insertions(+), 26 deletions(-)

diff --git a/libdap4/d4includes.h b/libdap4/d4includes.h
index dfcb152c..c3daa587 100644
--- a/libdap4/d4includes.h
+++ b/libdap4/d4includes.h
@@ -10,6 +10,7 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
+#include <inttypes.h>
 #include <assert.h>
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
diff --git a/libdap4/d4parser.c b/libdap4/d4parser.c
index dc565682..40cb7141 100644
--- a/libdap4/d4parser.c
+++ b/libdap4/d4parser.c
@@ -1133,11 +1133,13 @@ keyword(const char* name)
     int n = sizeof(keywordmap)/sizeof(KEYWORDINFO);
     int L = 0;
     int R = (n - 1);
+    int m, cmp;
+    struct KEYWORDINFO* p;
     for(;;) {
 	if(L > R) break;
-        int m = (L + R) / 2;
-	struct KEYWORDINFO* p = &keywordmap[m];
-	int cmp = strcasecmp(p->tag,name);
+        m = (L + R) / 2;
+	p = &keywordmap[m];
+	cmp = strcasecmp(p->tag,name);
 	if(cmp == 0) return p;
 	if(cmp < 0)
 	    L = (m + 1);
@@ -1196,13 +1198,14 @@ lookupAtomictype(NCD4parser* parser, const char* name)
     int n = nclistlength(parser->atomictypes);
     int L = 0;
     int R = (n - 1);
+    int m, cmp;
     NCD4node* p;
 
     for(;;) {
 	if(L > R) break;
-        int m = (L + R) / 2;
+        m = (L + R) / 2;
 	p = (NCD4node*)nclistget(parser->atomictypes,m);
-	int cmp = strcasecmp(p->name,name);
+	cmp = strcasecmp(p->name,name);
 	if(cmp == 0) return p;
 	if(cmp < 0)
 	    L = (m + 1);
diff --git a/libdap4/d4rc.c b/libdap4/d4rc.c
index 47880991..76f183f8 100644
--- a/libdap4/d4rc.c
+++ b/libdap4/d4rc.c
@@ -490,7 +490,8 @@ NCD4_rcprocess(NCD4INFO* info)
 static struct NCD4triple*
 rclocate(char* key, char* hostport)
 {
-    int i,found;
+    int i,found,t;
+    size_t hplen;
     NClist* rc = NCD4_globalstate->rc.rc;
     NCD4triple* triple = NULL;
 
@@ -504,8 +505,7 @@ rclocate(char* key, char* hostport)
 
     for(found=0,i=0;i<nclistlength(rc);i++) {
 	triple = (NCD4triple*)nclistget(rc,i);
-        size_t hplen = strlen(triple->host);
-        int t;
+        hplen = strlen(triple->host);
         if(strcmp(key,triple->key) != 0) continue; /* keys do not match */
         /* If the triple entry has no url, then use it
            (because we have checked all other cases)*/
diff --git a/libdap4/d4util.c b/libdap4/d4util.c
index 59e6c65d..dac195a6 100644
--- a/libdap4/d4util.c
+++ b/libdap4/d4util.c
@@ -102,6 +102,7 @@ char*
 NCD4_makeFQN(NCD4node* node)
 {
     char* fqn = NULL;
+    char* escaped;
     int i;
     NCD4node* g = node;
     NClist* path = nclistnew();
@@ -121,7 +122,7 @@ NCD4_makeFQN(NCD4node* node)
 	NCD4node* elem = (NCD4node*)nclistget(path,i);
 	if(elem->sort != NCD4_GROUP) break;
 	/* Add in the group name */
-	char* escaped = backslashEscape(elem->name);
+	escaped = backslashEscape(elem->name);
 	if(escaped == NULL) {free(fqn); fqn = NULL; goto done;}
 	strcat(fqn,"/");
 	strcat(fqn,escaped);
@@ -439,8 +440,8 @@ NCD4_saveblob(NCD4meta* meta, void* mem)
 int
 NCD4_error(int code, const int line, const char* file, const char* fmt, ...)
 {
-    fprintf(stderr,"(%s:%d) ",file,line);
     va_list argv;
+    fprintf(stderr,"(%s:%d) ",file,line);
     va_start(argv,fmt);
     vfprintf(stderr,fmt,argv);
     fprintf(stderr,"\n");
diff --git a/libdispatch/dwinpath.c b/libdispatch/dwinpath.c
index f14a8b62..ddbca53f 100644
--- a/libdispatch/dwinpath.c
+++ b/libdispatch/dwinpath.c
@@ -161,8 +161,9 @@ int
 NCopen3(const char* path, int flags, int mode)
 {
     int fd = -1;
+    char* cvtname;
     fflush(stderr);
-    char* cvtname = NCpathcvt(path);
+    cvtname = NCpathcvt(path);
     fflush(stderr);
     if(cvtname == NULL) return -1;
     fd = open(cvtname,flags,mode);
diff --git a/libdispatch/utf8proc.c b/libdispatch/utf8proc.c
index 1ecbb1db..c680678c 100644
--- a/libdispatch/utf8proc.c
+++ b/libdispatch/utf8proc.c
@@ -289,9 +289,10 @@ static nc_utf8proc_bool nc_grapheme_break_simple(int lbc, int tbc) {
 static nc_utf8proc_bool nc_grapheme_break_extended(int lbc, int tbc, nc_utf8proc_int32_t *state)
 {
   int lbc_override = lbc;
+  nc_utf8proc_bool break_permitted;
   if (state && *state != UTF8PROC_BOUNDCLASS_START)
     lbc_override = *state;
-  nc_utf8proc_bool break_permitted = nc_grapheme_break_simple(lbc_override, tbc);
+  break_permitted = nc_grapheme_break_simple(lbc_override, tbc);
   if (state) {
     // Special support for GB 12/13 made possible by GB999. After two RI
     // class codepoints we want to force a break. Do this by resetting the
diff --git a/libsrc/nc3internal.c b/libsrc/nc3internal.c
index da58f353..c6e983a1 100644
--- a/libsrc/nc3internal.c
+++ b/libsrc/nc3internal.c
@@ -1778,11 +1778,12 @@ NC3_inq_var_fill(const NC_var *varp, void *fill_value)
      */
     attrpp = NC_findattr(&varp->attrs, _FillValue);
     if ( attrpp != NULL ) {
+        const void *xp;
         /* User defined fill value */
         if ( (*attrpp)->type != varp->type || (*attrpp)->nelems != 1 )
             return NC_EBADTYPE;
 
-        const void *xp = (*attrpp)->xvalue;
+        xp = (*attrpp)->xvalue;
         /* value stored in xvalue is in external representation, may need byte-swap */
         switch(varp->type) {
             case NC_CHAR:   return ncx_getn_text               (&xp, 1,               (char*)fill_value);
diff --git a/libsrc/ncx.c b/libsrc/ncx.c
index 78208c4e..57b83713 100644
--- a/libsrc/ncx.c
+++ b/libsrc/ncx.c
@@ -9356,6 +9356,9 @@ ncx_get_size_t(const void **xpp,  size_t *ulp)
 int
 ncx_put_off_t(void **xpp, const off_t *lp, size_t sizeof_off_t)
 {
+	/* similar to put_ix_int() */
+	uchar *cp = (uchar *) *xpp;
+
 	/* No negative offsets stored in netcdf */
 	if (*lp < 0) {
 	  /* Assume this is an overflow of a 32-bit int... */
@@ -9364,9 +9367,6 @@ ncx_put_off_t(void **xpp, const off_t *lp, size_t sizeof_off_t)
 
 	assert(sizeof_off_t == 4 || sizeof_off_t == 8);
 
-	/* similar to put_ix_int() */
-	uchar *cp = (uchar *) *xpp;
-
 	if (sizeof_off_t == 4) {
 		*cp++ = (uchar) ((*lp)               >> 24);
 		*cp++ = (uchar)(((*lp) & 0x00ff0000) >> 16);
diff --git a/libsrc/ncx.h b/libsrc/ncx.h
index 6b2313c1..714c113e 100644
--- a/libsrc/ncx.h
+++ b/libsrc/ncx.h
@@ -45,6 +45,17 @@
 #define CRAYFLOAT 1 /* CRAY Floating point */
 #endif
 
+#ifndef __cplusplus
+  #if __STDC_VERSION__ == 199901L /* C99 */
+  /* "inline" is a keyword */
+  #elif _MSC_VER >= 1500 /* MSVC 9 or newer */
+    #define inline __inline
+  #elif __GNUC__ >= 3 /* GCC 3 or newer */
+    #define inline __inline
+  #else /* Unknown or ancient */
+    #define inline
+  #endif
+#endif
 
 /*
  * External sizes of the primitive elements.
diff --git a/libsrc/ncx.m4 b/libsrc/ncx.m4
index f28aa9a4..2779a51c 100644
--- a/libsrc/ncx.m4
+++ b/libsrc/ncx.m4
@@ -2262,6 +2262,9 @@ APIPrefix`x_get_size_t'(const void **xpp,  size_t *ulp)
 int
 APIPrefix`x_put_off_t'(void **xpp, const off_t *lp, size_t sizeof_off_t)
 {
+	/* similar to put_ix_int() */
+	uchar *cp = (uchar *) *xpp;
+
 	/* No negative offsets stored in netcdf */
 	if (*lp < 0) {
 	  /* Assume this is an overflow of a 32-bit int... */
@@ -2270,9 +2273,6 @@ APIPrefix`x_put_off_t'(void **xpp, const off_t *lp, size_t sizeof_off_t)
 
 	assert(sizeof_off_t == 4 || sizeof_off_t == 8);
 
-	/* similar to put_ix_int() */
-	uchar *cp = (uchar *) *xpp;
-
 	if (sizeof_off_t == 4) {
 		*cp++ = (uchar) ((*lp)               >> 24);
 		*cp++ = (uchar)(((*lp) & 0x00ff0000) >> 16);
diff --git a/nc_test/test_put.c b/nc_test/test_put.c
index 24a0c89b..703feeda 100644
--- a/nc_test/test_put.c
+++ b/nc_test/test_put.c
@@ -12677,6 +12677,7 @@ int
 test_nc_put_att_text(void)
 {
     int i, j, err, ncid, nok=0;
+    double dtmp;
     size_t k, ndx[1];
     text value[MAX_NELS];
 
@@ -12721,7 +12722,7 @@ test_nc_put_att_text(void)
 
                 for (k = 0; k < ATT_LEN(i,j); k++) {
                     ndx[0] = k;
-                    double dtmp = hash(ATT_TYPE(i,j), -1, ndx);
+                    dtmp = hash(ATT_TYPE(i,j), -1, ndx);
                     value[k] = (text)dtmp;
                 }
                 err = nc_put_att_text(ncid, i, ATT_NAME(i,j), ATT_LEN(i,j), value);
diff --git a/nc_test/test_put.m4 b/nc_test/test_put.m4
index d586b917..0d6705ed 100644
--- a/nc_test/test_put.m4
+++ b/nc_test/test_put.m4
@@ -1382,6 +1382,7 @@ int
 TestFunc(att)_text(AttVarArgs)
 {
     int i, j, err, ncid, nok=0;
+    double dtmp;
     IntType k, ndx[1];
     text value[MAX_NELS];
 
@@ -1426,7 +1427,7 @@ TestFunc(att)_text(AttVarArgs)
 
                 for (k = 0; k < ATT_LEN(i,j); k++) {
                     ndx[0] = k;
-                    double dtmp = hash(ATT_TYPE(i,j), -1, ndx);
+                    dtmp = hash(ATT_TYPE(i,j), -1, ndx);
                     value[k] = (text)dtmp;
                 }
                 err = PutAtt(text)(ncid, i, ATT_NAME(i,j), ATT_LEN(i,j), value);
diff --git a/nc_test/test_write.c b/nc_test/test_write.c
index 8cf116a4..70e6cfc1 100644
--- a/nc_test/test_write.c
+++ b/nc_test/test_write.c
@@ -2363,7 +2363,7 @@ test_nc_set_default_format(void)
 int
 test_nc_delete(void)
 {
-    int err, nok=0;;
+    int err, nok=0;
     int ncid;
 
     err = file_create(scratch, NC_CLOBBER, &ncid);
diff --git a/nc_test/test_write.m4 b/nc_test/test_write.m4
index 034d5588..936d99b7 100644
--- a/nc_test/test_write.m4
+++ b/nc_test/test_write.m4
@@ -2504,7 +2504,7 @@ TestFunc(set_default_format)(void)
 int
 TestFunc(delete)(void)
 {
-    int err, nok=0;;
+    int err, nok=0;
     int ncid;
 
     err = FileCreate(scratch, NC_CLOBBER, &ncid);
diff --git a/oc2/ocnode.c b/oc2/ocnode.c
index e4f0e8f5..f5ae9e2b 100644
--- a/oc2/ocnode.c
+++ b/oc2/ocnode.c
@@ -365,14 +365,15 @@ mergedas1(OCnode* dds, OCnode* das)
     for(i=0;i<nclistlength(das->subnodes);i++) {
 	OCnode* attnode = (OCnode*)nclistget(das->subnodes,i);
 	if(attnode->octype == OC_Attribute) {
+            OCattribute* att;
 	    if(dds->octype == OC_Atomic
 		|| dds->octype == OC_Sequence
 		|| dds->octype == OC_Structure
 		|| dds->octype == OC_Grid)
 	        attnode->att.var = dds;
-	    OCattribute* att = makeattribute(attnode->name,
-						attnode->etype,
-						attnode->att.values);
+            att = makeattribute(attnode->name,
+                                attnode->etype,
+                                attnode->att.values);
             nclistpush(dds->attributes,(void*)att);
 	}
     }
-- 
2.14.3 (Apple Git-98)

